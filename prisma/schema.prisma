// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?   @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum QuestionType {
  SELECT
  TEXT_AREA
  TEXT
}

enum ActionType {
  SHOW_QUESTION
  HIGHLIGHT
  BLOCK
}

model Response {
  id         String    @id @default(cuid())
  value      String?
  label      String?
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
}

model Question {
  id                   String       @id @default(cuid())
  reference            String
  text                 String
  responseValueActions Json         @default("{}")
  questionType         QuestionType @default(SELECT)
  responses            Response[]
  Form                 Form?        @relation(fields: [formId], references: [id])
  formId               String?
}

model FormMetaData {
  name    String @db.Text
  slug    String @unique @db.Text
  version String @db.Text
  Form    Form[]
}

model Form {
  id               String       @id @default(cuid())
  metadata         FormMetaData @relation(fields: [formMetaDataSlug], references: [slug])
  questions        Question[]
  formMetaDataSlug String       @unique @db.Text
}
